<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tangzy.oauth2.dao.user.UserMapper">
    <resultMap id="BaseResultMap" type="cn.tangzy.oauth2.entity.user.User">
        <id column="username" jdbcType="VARCHAR" property="username"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="activated" jdbcType="BIT" property="activated"/>
        <result column="activationkey" jdbcType="VARCHAR" property="activationkey"/>
        <result column="resetpasswordkey" jdbcType="VARCHAR" property="resetpasswordkey"/>
    </resultMap>

    <resultMap id="BaseResultMapWithAuthority" type="cn.tangzy.oauth2.entity.user.User" extends="BaseResultMap">

        <collection property="authorities" ofType="cn.tangzy.oauth2.entity.authority.Authority">
            <id column="name" jdbcType="VARCHAR" property="name"/>
        </collection>

    </resultMap>


    <select id="findByUsernameCaseInsensitive" parameterType="map" resultMap="BaseResultMapWithAuthority">
        select
        <include refid="Base_Column_List"/>,`name`
        from `user`
        left join
        user_authority
        on `user`.username=user_authority.username
        left join
        authority
        on
        user_authority.authority = authority.authority
        where lower(`user`.username) = low(#{username,jdbcType=VARCHAR})
    </select>

    <select id="findByEmail" parameterType="map" resultMap="BaseResultMapWithAuthority">
        select
        <include refid="Base_Column_List"/>,`name`
        from `user`
        left join
        user_authority
        on `user`.username=user_authority.username
        left join
        authority
        on
        user_authority.authority = authority.authority
        where `user`.email = #{email,jdbcType=VARCHAR}
    </select>


    <select id="findByEmailAndActivationKey" parameterType="map" resultMap="BaseResultMapWithAuthority">
        select
        <include refid="Base_Column_List"/>,`name`
        from user
        left join
        user_authority
        on user.username=user_authority.username
        left join
        authority
        on
        user_authority.authority = authority.authority
        where `user`.email = #{email,jdbcType=VARCHAR} and `user`.activationkey = #{activationkey,jdbcType=VARCHAR}
    </select>

    <select id="findByEmailAndResetPasswordKey" parameterType="map" resultMap="BaseResultMapWithAuthority">
        select
        <include refid="Base_Column_List"/>,`name`
        from `user`
        left join
        user_authority
        on `user`.username=user_authority.username
        left join
        authority
        on
        user_authority.authority = authority.authority
        where `user`.email = #{email,jdbcType=VARCHAR} and `user`.resetpasswordkey =
        #{resetpasswordkey,jdbcType=VARCHAR}
    </select>


    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        username, email, password, activated, activationkey, resetpasswordkey
    </sql>
    <select id="selectByExample" parameterType="cn.tangzy.oauth2.entity.user.UserExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from `user`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `user`
        where username = #{username,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        DELETE FROM `user`
        WHERE username = #{username,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByExample" parameterType="cn.tangzy.oauth2.entity.user.UserExample">
        delete from `user`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.tangzy.oauth2.entity.user.User">
        INSERT INTO `user` (username, email, password,
                            activated, activationkey, resetpasswordkey
        )
        VALUES (#{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                #{activated,jdbcType=BIT}, #{activationkey,jdbcType=VARCHAR}, #{resetpasswordkey,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="cn.tangzy.oauth2.entity.user.User">
        insert into `user`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null">
                username,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="activated != null">
                activated,
            </if>
            <if test="activationkey != null">
                activationkey,
            </if>
            <if test="resetpasswordkey != null">
                resetpasswordkey,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="activated != null">
                #{activated,jdbcType=BIT},
            </if>
            <if test="activationkey != null">
                #{activationkey,jdbcType=VARCHAR},
            </if>
            <if test="resetpasswordkey != null">
                #{resetpasswordkey,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.tangzy.oauth2.entity.user.UserExample" resultType="java.lang.Long">
        select count(*) from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update `user`
        <set>
            <if test="record.username != null">
                username = #{record.username,jdbcType=VARCHAR},
            </if>
            <if test="record.email != null">
                email = #{record.email,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.activated != null">
                activated = #{record.activated,jdbcType=BIT},
            </if>
            <if test="record.activationkey != null">
                activationkey = #{record.activationkey,jdbcType=VARCHAR},
            </if>
            <if test="record.resetpasswordkey != null">
                resetpasswordkey = #{record.resetpasswordkey,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update `user`
        set username = #{record.username,jdbcType=VARCHAR},
        email = #{record.email,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        activated = #{record.activated,jdbcType=BIT},
        activationkey = #{record.activationkey,jdbcType=VARCHAR},
        resetpasswordkey = #{record.resetpasswordkey,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.tangzy.oauth2.entity.user.User">
        update `user`
        <set>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="activated != null">
                activated = #{activated,jdbcType=BIT},
            </if>
            <if test="activationkey != null">
                activationkey = #{activationkey,jdbcType=VARCHAR},
            </if>
            <if test="resetpasswordkey != null">
                resetpasswordkey = #{resetpasswordkey,jdbcType=VARCHAR},
            </if>
        </set>
        where username = #{username,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.tangzy.oauth2.entity.user.User">
        UPDATE `user`
        SET email            = #{email,jdbcType=VARCHAR},
            `password`       = #{password,jdbcType=VARCHAR},
            activated        = #{activated,jdbcType=BIT},
            activationkey    = #{activationkey,jdbcType=VARCHAR},
            resetpasswordkey = #{resetpasswordkey,jdbcType=VARCHAR}
        WHERE username = #{username,jdbcType=VARCHAR}
    </update>
</mapper>